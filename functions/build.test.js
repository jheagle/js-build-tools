const { setUp } = require('./testHelpers')
const gulpConfig = setUp.gulpConfig
const build = require('./build')
const bundle = require('./bundle')
const bundleLint = require('./bundleLint')
const bundleMinify = require('./bundleMinify')
const { clean, distSeries } = require('./partials')
const compileReadme = require('./compileReadme')
const dist = require('./dist')
const distLint = require('./distLint')
const distMinify = require('./distMinify')
const testFull = require('./testFull')

const genericFunction = () => Promise.resolve(true)
jest.mock('./bundle', () => jest.fn(genericFunction))
jest.mock('./bundleLint', () => jest.fn(genericFunction))
jest.mock('./bundleMinify', () => jest.fn(genericFunction))
jest.mock('./partials/clean', () => jest.fn(genericFunction))
jest.mock('./compileReadme', () => jest.fn(genericFunction))
jest.mock('./dist', () => jest.fn(genericFunction))
jest.mock('./distLint', () => jest.fn(genericFunction))
jest.mock('./distMinify', () => jest.fn(genericFunction))
jest.mock('./partials/distSeries', () => jest.fn(() => genericFunction))
jest.mock('./testFull', () => jest.fn(genericFunction))

describe('build', () => {
  test('when nodeOnly true: calls clean, dist, distLint, distMinify, compileReadme, testFull', done => {
    gulpConfig.set('nodeOnly', true)
    expect.assertions(6)
    build()
    setTimeout(() => {
      expect(clean).toHaveBeenCalled()
      expect(dist).toHaveBeenCalled()
      expect(distLint).toHaveBeenCalled()
      expect(distMinify).toHaveBeenCalled()
      expect(compileReadme).toHaveBeenCalled()
      expect(testFull).toHaveBeenCalled()
      done()
    }, 500)
  })

  test('when nodeOnly false: calls clean, distSeries, distLint, distMinify, bundle, bundleLint, bundleMinify, compileReadme, testFull', done => {
    gulpConfig.set('nodeOnly', false)
    expect.assertions(9)
    build()
    setTimeout(() => {
      expect(clean).toHaveBeenCalled()
      expect(distSeries).toHaveBeenCalled()
      expect(distLint).toHaveBeenCalled()
      expect(distMinify).toHaveBeenCalled()
      expect(bundle).toHaveBeenCalled()
      expect(bundleLint).toHaveBeenCalled()
      expect(bundleMinify).toHaveBeenCalled()
      expect(compileReadme).toHaveBeenCalled()
      expect(testFull).toHaveBeenCalled()
      done()
    }, 500)
  })
})
