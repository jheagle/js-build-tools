"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("core-js/modules/esnext.weak-map.delete-all.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _index = _interopRequireDefault(require("../mimic-fn/index.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const calledFunctions = new WeakMap();
const onetime = function (function_) {
  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (typeof function_ !== 'function') {
    throw new TypeError('Expected a function');
  }
  let returnValue;
  let callCount = 0;
  const functionName = function_.displayName || function_.name || '<anonymous>';
  const onetime = function () {
    calledFunctions.set(onetime, ++callCount);
    if (callCount === 1) {
      for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
        arguments_[_key] = arguments[_key];
      }
      returnValue = function_.apply(this, arguments_);
      function_ = null;
    } else if (options.throw === true) {
      throw new Error("Function `".concat(functionName, "` can only be called once"));
    }
    return returnValue;
  };
  (0, _index.default)(onetime, function_);
  calledFunctions.set(onetime, callCount);
  return onetime;
};
onetime.callCount = function_ => {
  if (!calledFunctions.has(function_)) {
    throw new Error("The given function `".concat(function_.name, "` is not wrapped by the `onetime` package"));
  }
  return calledFunctions.get(function_);
};
var _default = exports.default = onetime;