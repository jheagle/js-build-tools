"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signalsByNumber = exports.signalsByName = void 0;
require("core-js/modules/esnext.async-iterator.find.js");
require("core-js/modules/esnext.async-iterator.reduce.js");
require("core-js/modules/esnext.iterator.constructor.js");
require("core-js/modules/esnext.iterator.find.js");
require("core-js/modules/esnext.iterator.reduce.js");
require("core-js/modules/web.dom-collections.iterator.js");
var _os = require("os");
var _realtime = require("./realtime.js");
var _signals = require("./signals.js");
const getSignalsByName = function () {
  const signals = (0, _signals.getSignals)();
  return signals.reduce(getSignalByName, {});
};
const getSignalByName = function (signalByNameMemo, _ref) {
  let {
    name,
    number,
    description,
    supported,
    action,
    forced,
    standard
  } = _ref;
  return {
    ...signalByNameMemo,
    [name]: {
      name,
      number,
      description,
      supported,
      action,
      forced,
      standard
    }
  };
};
const signalsByName = exports.signalsByName = getSignalsByName();
const getSignalsByNumber = function () {
  const signals = (0, _signals.getSignals)();
  const length = _realtime.SIGRTMAX + 1;
  const signalsA = Array.from({
    length
  }, (value, number) => getSignalByNumber(number, signals));
  return Object.assign({}, ...signalsA);
};
const getSignalByNumber = function (number, signals) {
  const signal = findSignalByNumber(number, signals);
  if (signal === undefined) {
    return {};
  }
  const {
    name,
    description,
    supported,
    action,
    forced,
    standard
  } = signal;
  return {
    [number]: {
      name,
      number,
      description,
      supported,
      action,
      forced,
      standard
    }
  };
};
const findSignalByNumber = function (number, signals) {
  const signal = signals.find(_ref2 => {
    let {
      name
    } = _ref2;
    return _os.constants.signals[name] === number;
  });
  if (signal !== undefined) {
    return signal;
  }
  return signals.find(signalA => signalA.number === number);
};
const signalsByNumber = exports.signalsByNumber = getSignalsByNumber();